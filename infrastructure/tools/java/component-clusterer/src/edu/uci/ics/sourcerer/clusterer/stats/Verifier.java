/* 
 * Sourcerer: an infrastructure for large-scale source code analysis.
 * Copyright (C) by contributors. See CONTRIBUTORS.txt for full list.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package edu.uci.ics.sourcerer.clusterer.stats;

import static edu.uci.ics.sourcerer.util.io.Logging.logger;

import java.util.Map;
import java.util.logging.Level;

import edu.uci.ics.sourcerer.clusterer.dir.DirectoryClusterer;
import edu.uci.ics.sourcerer.clusterer.file.FileClusterer;
import edu.uci.ics.sourcerer.util.Helper;

/**
 * @author Joel Ossher (jossher@uci.edu)
 */
public class Verifier {
  private static final int DIR_METHOD = 0x01;
  private static final int HASH_METHOD = 0x02;
  
  /**
   * Compares the file listings generated by each method,
   * and highlights differences.
   */
  public static void compareFileListings() {
    // Keep a map of all the files
    Map<String, Integer> files = Helper.newHashMap();
    
    // Load the file listing from the directory method
    logger.info("Loading directory file listing...");
    Integer combined = DIR_METHOD;
    for (String file : DirectoryClusterer.loadFileListing()) {
      if (files.containsKey(file)) {
        logger.log(Level.SEVERE, "Duplicated file: " + file);
      } else {
        files.put(file, combined);
      }
    }
    
    // Load the file listing from the hashing method
    logger.info("Loading hashing file listing...");
    Integer newMethod = HASH_METHOD;
    combined = DIR_METHOD | HASH_METHOD;
    for (String file : FileClusterer.loadFileListing()) {
      Integer val = files.get(file);
      if (val == null) {
        files.put(file, newMethod);
      } else if ((val.intValue() & HASH_METHOD) == 1){
        logger.log(Level.SEVERE, "Duplicated file: " + file);
      } else {
        files.put(file, combined);
      }
    }
    
    // Verify the results
    logger.info("Tabulating results...");
    final int shared = DIR_METHOD | HASH_METHOD;
    int sharedCount = 0;
    int uniqueDirCount = 0;
    int uniqueHashCount = 0;
    for (int val : files.values()) {
      switch (val) {
        case shared: sharedCount++; break;
        case DIR_METHOD: uniqueDirCount++; break;
        case HASH_METHOD: uniqueHashCount++; break;
      }
    }
    logger.info(files.size() + " total files.");
    logger.info(sharedCount + " shared files between all methods.");
    logger.info(uniqueDirCount + " files unique to the dir method.");
    logger.info(uniqueHashCount + " files unique to the hash method.");
  }
}
