/*
 * Sourcerer: An infrastructure for large-scale source code analysis.
 * Copyright (C) by contributors. See CONTRIBUTORS.txt for full list.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * 
 */
package edu.uci.ics.sourcerer.repomanager;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.Properties;


/**
 * @author <a href="bajracharya@gmail.com">Sushil Bajracharya</a>
 * @created Jan 12, 2009
 *
 */
public class ProjectProperties {
	
	// direct url for soource download; get the files from here
	public String sourceUrl;
	
	// pre mirror url
	public String downloadLink;
	
	// project url in the original repository
	public String containerUrl;
	
	// check out the url from here
	public String scmUrl;
	
	
	public String license;
	public String fileExtensions;
	public String keywords;
	public String languageGuessed;
	public String category;
	
	public String name;
	
	public String crawledDate;
	
	public String projectDescription;
	public String contentDescription;
	
	public String releaseDate;
	
	public String sourceCertainty;
	
	public String versionGuessed; // as detected by the crawler
	public String extractedVersion; // processed
	
	public String id;
	
	// where was this crawled from ?
	public String originRepositoryName;
	public String originRepositoryUrl;
	
	// packages represent multiple source downloads from the same project
	// for example, a sourceforge project can have multiple archives representing
	// various packages within the project.
	//
	// when a project has only one archive file associated, this will be null (for eg: in
	// the case of javanet and apache, and some sourceforge projects)
	// otherwise the root project properties will hold properties as it pertains to the SCM
	// and the packages hold the properties of all the packages
	// 
	// note that all the elements of the packages are supposed to hold files from the same 
	// release or version, they are not supposed to store multiple versions of the same archive
	//
	// key == package name, generated by the corresponding crawler output filter
	public Map<String, ProjectProperties> packages = null;
	
	public boolean isJavaProject(){
		String[] _langs = languageGuessed.split(",");
		for(String _lang: _langs){
			if(_lang.trim().toUpperCase().startsWith("JAVA"))
				return true;
		}
		
		return false;
	}
	
	/**
	 * 
	 * @return negative if Java is not found as one of the languages
	 * 		   possible that crawler did not find this info
	 */
	public float getIsJavaProjectCertainty(){
		String[] _langs = languageGuessed.split(",");
		for(String _lang: _langs){
			if(_lang.trim().toUpperCase().startsWith("JAVA")){
				String[] _langCertaintyStr = _lang.split("=");
				if(_langCertaintyStr.length>1)
					return Float.parseFloat(_langCertaintyStr[1].trim());
				else
					return 1;
			}
		}
		
		return -1;
	}
	
	/**
	 * 
	 * @return negative if the crawler could not determine this info
	 */
	public float getProjectHasSourceCertainty(){
		
		if(!sourceCertainty.startsWith("yes"))
			return -1;
		
		String[] _srcCertaintyStr = sourceCertainty.split("=");
		if(_srcCertaintyStr.length>1)
			return Float.parseFloat(_srcCertaintyStr[1].trim());
		else
			return 1;
	}
	
	public String getVersion(){
		return versionGuessed.split("\\?")[0];
	}
	
	public void write(String fileName) throws FileNotFoundException, IOException {
		Properties _properties = new Properties();
		
		_properties.setProperty("sourceUrl", this.sourceUrl );
		// _properties.setProperty("downloadLink", this.downloadLink );
		_properties.setProperty("containerUrl", this.containerUrl );
		_properties.setProperty("scmUrl", this.scmUrl );
		_properties.setProperty("license", this.license );
		_properties.setProperty("fileExtensions", this.fileExtensions );
		_properties.setProperty("keywords", this.keywords );
		_properties.setProperty("languageGuessed", this.languageGuessed );
		_properties.setProperty("category", this.category );
		_properties.setProperty("name", this.name );
		_properties.setProperty("crawledDate", this.crawledDate );
		_properties.setProperty("projectDescription", this.projectDescription );
		_properties.setProperty("contentDescription", this.contentDescription );
		_properties.setProperty("releaseDate", this.releaseDate );
		_properties.setProperty("versionGuessed", this.versionGuessed );
		_properties.setProperty("exractedVersion", this.extractedVersion );
		// _properties.setProperty("originRepositoryName", this.originRepositoryName);
		_properties.setProperty("originRepositoryUrl", this.originRepositoryUrl);
		
		// for each package
		if(packages!=null && packages.size()>0){
		
			int _packages = packages.size();	
			_properties.setProperty(PACKAGE_SIZE, _packages+"" );
			
			int i=1;
			for( String packageName: packages.keySet() ){
				
				ProjectProperties _pp = packages.get(packageName);
				
				_properties.setProperty(PACKAGE_NAME + Constants.getPackageFolderNameSeparator() + i, packageName );
				_properties.setProperty(PACKAGE_RELEASEDATE + Constants.getPackageFolderNameSeparator() + i, _pp.releaseDate );
				_properties.setProperty(PACKAGE_VERSIONGUESSED + Constants.getPackageFolderNameSeparator() + i, _pp.versionGuessed );
				_properties.setProperty(PACKAGE_EXTRACTEDVERSION + Constants.getPackageFolderNameSeparator() + i, _pp.extractedVersion );
				_properties.setProperty(PACKAGE_SOURCEURL + Constants.getPackageFolderNameSeparator() + i, _pp.sourceUrl );
				
				i++;
			}
		}
		
		
		FileOutputStream _fos = new FileOutputStream(fileName);
		BufferedOutputStream _bos = new BufferedOutputStream(_fos); 
		_properties.store(_bos, null);
	    _fos.flush();
	    _bos.flush();
	    _fos.close();
	    _bos.close();
	   
	}
	
	final public static String PACKAGE_SIZE = "package.size";
	final public static String PACKAGE_NAME = "package.name";
	final public static String PACKAGE_RELEASEDATE = "package.releaseDate";
	final public static String PACKAGE_VERSIONGUESSED = "package.versionGuessed";
	final public static String PACKAGE_EXTRACTEDVERSION = "package.extractedVersion";
	final public static String PACKAGE_SOURCEURL = "package.sourceUrl";
	
	public static Properties loadFromProjectFolder(File projectFolder) throws FileNotFoundException, IOException {
		String projectFolderName = projectFolder.getAbsolutePath();
		
		String propertiesFileName = projectFolderName + File.separator + Constants.getSourceProjectPropertiesFileName();
		Properties p = new Properties();
		p.load(new FileInputStream(propertiesFileName));
		
		return p;
	}
	
	/**
	 * 
	 * @param other the other project properties file from which to compare date with
	 * @return -2 if any one of the dates are not in valid format yyyy-MM-dd HH:mm
	 * 			else the result of thisDate.compareTo(otherDate)
	 */
	public int compareReleaseDate(ProjectProperties other){
		
		SimpleDateFormat df= new SimpleDateFormat("yyyy-MM-dd HH:mm");
		
		Date _myDate, _otherDate;
		try {
			_myDate = df.parse(this.releaseDate);
			_otherDate = df.parse(other.releaseDate);
		} catch (ParseException e) {
			// e.printStackTrace();
			return -2;
		}

		return _myDate.compareTo(_otherDate);
	}
	
	

}


